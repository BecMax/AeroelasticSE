# mkgeom.py

''' Use WTPerf to create sample geometry and atm for runFAST '''

import sys, math, os
import numpy as np
from openmdao.main.datatypes.api import Array

sys.path.append("C:/Python27/openmdao-0.7.0/twister/models/FAST/") # todo: machine dependency
from twister.models.CST.turbine.rotor.rotoraeroanalysis import WTPerf

def makeGeometry():
    '''
    Returns
    -------
    geometry : dictionary
    atm : dictionary
    '''
    
    r = [2.75, 5.0,  6.0,  7.0,  8.0,  9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 
        15.0, 16.0, 17.0, 18.0, 19.0, 19.9, 20.4]
    theta = [20.0, 18.15, 14.65, 11.525, 8.75, 6.65, 5.35, 4.425, 3.575, 
        2.875, 2.31, 1.69, 1.065, 0.55, 0.235, 0.095, 0.035, 0.02]
    chord = [1.63, 1.6135, 1.5685, 1.5105, 1.4505, 1.388, 1.325, 1.2615, 1.196, 
             1.129, 1.0605, 0.9905, 0.918, 0.8435, 0.7555, 0.625, 0.405, 0.265]

    alpha = [
     -3.14159265, -3.11665938, -3.0917261 , -3.06679283, -3.04185955, -3.01692628,
     -2.991993  , -2.96705973, -2.94212645, -2.91719318, -2.8922599 , -2.86732663,
     -2.84239335, -2.81746008, -2.7925268 , -2.70526034, -2.61799388, -2.53072742,
     -2.44346095, -2.35619449, -2.26892803, -2.18166156, -2.0943951 , -2.00712864,
     -1.91986218, -1.83259571, -1.74532925, -1.65806279, -1.57079633, -1.48352986,
     -1.3962634 , -1.30899694, -1.22173048, -1.13446401, -1.04719755, -0.95993109,
     -0.87266463, -0.78539816, -0.6981317 , -0.61086524, -0.52359878, -0.43633231,
     -0.34906585, -0.33036589, -0.31166594, -0.29296598, -0.27426603, -0.25556607,
     -0.23686611, -0.21816616, -0.1994662 , -0.18076624, -0.16206629, -0.14336633,
     -0.12466638, -0.08726646, -0.07853982, -0.06981317, -0.06108652, -0.05235988,
     -0.04363323, -0.03490659, -0.02617994, -0.01745329, -0.00872665,  0.0,
     0.00872665 , 0.01745329 , 0.02617994 , 0.03490659 , 0.04363323 , 0.05235988,
     0.06108652 , 0.06981317 , 0.07853982 , 0.08726646 , 0.09599311 , 0.1134464,
     0.13089969 , 0.13962634 , 0.14835299 , 0.15707963 , 0.16580628 , 0.17453293,
     0.18325957 , 0.19198622 , 0.20071286 , 0.20943951 , 0.21816616 , 0.2268928,
     0.23561945 , 0.2443461  , 0.25307274 , 0.26179939 , 0.27052603 , 0.27925268,
     0.28797933 , 0.29670597 , 0.30543262 , 0.31415927 , 0.32288591 , 0.33161256,
     0.3403392  , 0.34906585 , 0.43633231 , 0.52359878 , 0.61086524 , 0.6981317,
     0.78539816 , 0.87266463 , 0.95993109 , 1.04719755 , 1.13446401 , 1.22173048,
     1.30899694 , 1.3962634  , 1.48352986 , 1.57079633 , 1.65806279 , 1.74532925,
     1.83259571 , 1.91986218 , 2.00712864 , 2.0943951  , 2.18166156 , 2.26892803,
     2.35619449 , 2.44346095 , 2.53072742 , 2.61799388 , 2.70526034 , 2.7925268,
     2.81746008 , 2.84239335 , 2.86732663 , 2.8922599  , 2.91719318 , 2.94212645,
     2.96705973 , 2.991993   , 3.01692628 , 3.04185955 , 3.06679283 , 3.0917261,
     3.11665938,  3.14159265 ]

    cl = [ 
     0.00000000e+00 ,  8.44450878e-02 ,  1.68890176e-01 ,  2.53335263e-01,
     3.37780351e-01 ,  4.22225439e-01 ,  5.06670527e-01 ,  5.91115614e-01,
     6.75560702e-01 ,  7.60005790e-01 ,  8.44450878e-01 ,  9.28895965e-01,
     1.01334105e+00 ,  1.09778614e+00 ,  1.18223123e+00 ,  9.99693432e-01,
     8.78384260e-01 ,  7.87813402e-01 ,  7.12572915e-01 ,  6.44152597e-01,
     5.77671600e-01 ,  5.10390952e-01 ,  4.40961978e-01 ,  3.69008958e-01,
     2.94874406e-01 ,  2.19447562e-01 ,  1.44037245e-01 ,  7.02694626e-02,
     4.76153481e-17 , -7.02694626e-02 , -1.44037245e-01 , -2.19447562e-01,
     -2.94874406e-01,  -3.69008958e-01,  -4.40961978e-01,  -5.10390952e-01,
     -5.77671600e-01,  -6.44152597e-01,  -7.12572915e-01,  -7.87813402e-01,
     -8.78384260e-01,  -9.99693432e-01,  -1.18223123e+00,  -1.12151589e+00,
     -1.06080056e+00,  -1.00008522e+00,  -9.39369887e-01,  -8.78654551e-01,
     -8.17939216e-01,  -7.57223880e-01,  -6.96508545e-01,  -6.35793209e-01,
     -5.75077874e-01,  -5.14362538e-01,  -4.53647203e-01,  -3.32216532e-01,
     -2.76178320e-01,  -2.19872713e-01,  -1.63500257e-01,  -1.07060953e-01,
     -5.06216485e-02,   5.61710981e-03,   6.13879275e-02,   1.15487529e-01,
     1.70723557e-01 ,  2.25892737e-01 ,  2.80794522e-01 ,  3.34960972e-01,
     3.89127422e-01 ,  4.47772732e-01 ,  5.16712735e-01 ,  5.87123409e-01,
     6.56130261e-01 ,  7.16045695e-01 ,  7.68006139e-01 ,  8.20367676e-01,
     8.72662363e-01 ,  9.75847916e-01 ,  1.07622583e+00 ,  1.12591342e+00,
     1.17600210e+00 ,  1.22542229e+00 ,  1.27437455e+00 ,  1.32205668e+00,
     1.36746595e+00 ,  1.41107031e+00 ,  1.44778926e+00 ,  1.48524355e+00,
     1.51480969e+00 ,  1.54798566e+00 ,  1.57728441e+00 ,  1.59455040e+00,
     1.61803332e+00 ,  1.63563355e+00 ,  1.64855438e+00 ,  1.65679580e+00,
     1.65968933e+00 ,  1.65823770e+00 ,  1.65518170e+00 ,  1.66094972e+00,
     1.66651719e+00 ,  1.67308740e+00 ,  1.68059348e+00 ,  1.68890176e+00,
     1.42813347e+00 ,  1.25483466e+00 ,  1.12544772e+00 ,  1.01796131e+00,
     9.20217996e-01 ,  8.25245143e-01 ,  7.29129931e-01 ,  6.29945682e-01,
     5.27155654e-01 ,  4.21249151e-01 ,  3.13496517e-01 ,  2.05767493e-01,
     1.00384947e-01 ,  6.80219259e-17 , -7.02694626e-02 , -1.44037245e-01,
     -2.19447562e-01,  -2.94874406e-01,  -3.69008958e-01,  -4.40961978e-01,
     -5.10390952e-01,  -5.77671600e-01,  -6.44152597e-01,  -7.12572915e-01,
     -7.87813402e-01,  -8.78384260e-01,  -9.99693432e-01,  -1.18223123e+00,
     -1.09778614e+00,  -1.01334105e+00,  -9.28895965e-01,  -8.44450878e-01,
     -7.60005790e-01,  -6.75560702e-01,  -5.91115614e-01,  -5.06670527e-01,
     -4.22225439e-01,  -3.37780351e-01,  -2.53335263e-01,  -1.68890176e-01,
     -8.44450878e-02,   0.00000000e+00 ]

    cd = [ 
     0.12826512,  0.1289157 ,  0.13086578,  0.13411028,  0.13864075,  0.14444542,
     0.15150919,  0.15981368,  0.16933728,  0.18005521,  0.19193956,  0.20495939,
     0.21908079,  0.23426697,  0.25047833,  0.31465814,  0.38880143,  0.47053774,
     0.55724661,  0.64613831,  0.73433975,  0.81898309,  0.89729432,  0.96667906,
     1.02480306,  1.0696648 ,  1.09965815,  1.11362299,  1.11088235,  1.11362299,
     1.09965815,  1.0696648 ,  1.02480306,  0.96667906,  0.89729432,  0.81898309,
     0.73433975,  0.64613831,  0.55724661,  0.47053774,  0.38880143,  0.31465814,
     0.25047833,  0.23329766,  0.216117  ,  0.19893633,  0.18175567,  0.164575,
     0.14739434,  0.13021367,  0.113033  ,  0.09585234,  0.07867167,  0.06149101,
     0.04431034,  0.033      ,  0.032      ,  0.031      , 0.03      ,  0.029      ,  0.028,
     0.027      , 0.026      ,  0.025      ,  0.024      , 0.23      ,  0.022      ,  0.021,
     0.02       , 0.019      ,  0.018      ,  0.017      , 0.016     ,  0.015      ,  0.014,
     0.013      , 0.012      ,  0.011      ,  0.01125369,  0.01246357,  0.01367738,
     0.01499995,  0.01641544,  0.01800201,  0.01986813,  0.02184676,  0.02461698,
     0.02758806,  0.03203449,  0.03643518,  0.04203685,  0.05072919,  0.05911526,
     0.06963428,  0.08213477,  0.09667059,  0.11348251,  0.13234521,  0.15251386,
     0.17091304,  0.19010009,  0.20976216,  0.22981624,  0.25047833,  0.31465814,
     0.38880143,  0.47053774,  0.55724661,  0.64613831,  0.73433975,  0.81898309,
     0.89729432,  0.96667906,  1.02480306,  1.0696648 ,  1.09965815,  1.11362299,
     1.11088235,  1.11362299,  1.09965815,  1.0696648 ,  1.02480306,  0.96667906,
     0.89729432,  0.81898309,  0.73433975,  0.64613831,  0.55724661,  0.47053774,
     0.38880143,  0.31465814,  0.25047833,  0.23426697,  0.21908079,  0.20495939,
     0.19193956,  0.18005521,  0.16933728,  0.15981368,  0.15150919,  0.14444542,
     0.13864075,  0.13411028,  0.13086578,  0.1289157 ,  0.12826512 ]

    from airfoil import Polar, PolarByRe
    R2D = 180.0/math.pi
    Re = 5e5
    polar = Polar(Re, np.array(alpha)*R2D, cl, cd, False)
    af = PolarByRe([polar])

    n = len(r)
    afarr = [af]*n
    geometry = WTPerf.defineGeometryWithEndPoints(r, chord, theta, afarr)

    hubHt = 35.0
    atm = WTPerf.defineAtmosphere(hubHt)
    
    return geometry, atm

#-----------------------------------------------

def toVT(geometry, afpath):
    """ convert geom returned above to an instance of the GeometryAero variable tree"""
    from twister.components.rotor_cst_component import GeometryAero
    gvt = GeometryAero(afpath=afpath)
    return gvt

    gvt.chord = geometry['chord']
    gvt.yaw = geometry['yaw']
#    gvt.r_af = Array(iotype='in', dtype=np.float, desc='radial stations', units='m')
    gvt.r_af = np.array([])
   
    gvt.r = geometry['r']       
    gvt.tilt = geometry['tilt']
    gvt.theta = geometry['theta']  
    gvt.nBlada = geometry['nBlade'] 
    gvt.preCone = geometry['preCone']
    gvt.polars = geometry['polars'] 
    return gvt
    


def main():
    geom, atm = makeGeometry()
    
    print 'ATM'
    for k in atm:
        print '  atm[{:}] = {:}'.format(k, atm[k])
    
    print
    print 'GEOM'
    for k in geom:
        print '  geom[{:}] = {:}'.format(k, geom[k])
        
if __name__=="__main__":

    main()
    